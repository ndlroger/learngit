Git学习笔记
=================================================================================================================================================================
master（主分支）
1,git init   //用于初始化Git库
2,git add xxx.txt   //向库中添加文件    把文件修改添加到暂存区
3,git commit -m "xxxx"   //提交对这次修改的记录  把暂存区的所有内容提交到当前分支   每次修改，如果不用git add到暂存区，那就不会加入到commit中。
  git commit -m ""  只会提交添加到缓存区的文件（只提交添加的）
  git commit -a -m ""  能提交修改过，但是没有添加到缓存区的文件（修改过的就能提交）相当于 git add +git commit 
4,git status  //查看库中文件的状态
5,git diff   //查看修改前后文件的异同
6,git log     //查看修改时提交的文件commit
7,git reset --hard HEAD~x           //返回到之前某一版本，当前版本为HEAD~0  往前以此类推
  git reset --hard commit id     //穿梭到某一版本，只需输入版本号的前几位    git reset命令既可以回退版本，也可以把暂存区的修改回退到工作区
8,git reflog    //查看之前的操作日志
9,git checkout -- xxx.txt   //意思就是，把readme.txt文件在工作区的修改全部撤销，这里有两种情况：
                            一种是readme.txt自修改后还没有被放到暂存区，现在，撤销修改就回到和版本库一模一样的状态；
							一种是readme.txt已经添加到暂存区后，又作了修改，现在，撤销修改就回到添加到暂存区后的状态。
10,git rm xx.txt    //从库中删除某一文件，该操作只删除该文件最新版本，之前的版本可以通过git reset回退找回，但是commit之后的内容无法找回
11,ssh-keygen -t rsa -C "youremail@example.com"   //创建github远程库，需要先生成SSH key  然后将公钥传递到github上，才能将本地的Git内容与github相连
12,git remote add origin https://github.com/ndlroger/xxx.git //默认使用HTTPS创建连接  origin代表远程库
   git push -u origin master          //第一次上传时使用-u参数，将master分支的所有内容上传
13,git remote add origin git@github.com:ndlroger/xxx.git  //使用ssh连接时命令  速度快  不用每次都输密码  但是在某些只开放http端口的公司内部就无法使用
14,git push origin master    //平时上传的命令   
15,git clone https://github.com/ndlroger/xxx.git   //从github上克隆库到本地
=================================================================================================================================================================
其他分支
1,git branch <name>     //创建dev分支，创建分支时，分支中的内容保存到与主分支提交后的内容一致
  git checkout <name>   //切换到dev分支
  git checkout -b <name>   //创建并切换到dev分支，相当于执行上面两条命令
2,git branch             //查看库中所有分支，正在进行的分支前有"*"号标识
3,git merge <name>       //将某一个分支合并到当前分支
4,git branch -d <name>     //删除某个分支，可以删除的前提是该分支已经被合并，否则需要使用-D参数删除
5,当当前分支和其他分支内容不一致且进度相当时，如果合并会引起冲突，需要解决冲突后重新提交
6,git log --graph --pretty=oneline --abbrev-commit  //查看日志图谱
7,git merge --no-ff -m "xxxx" <name>      
=================================================================================================================================================================
bug分支
1,git stash      //用于存储目前的工作状态，在需要离开目前的开发工作去做bug修复时使用
2,git stash list  //查看存储的工作
3,git stash apply  //恢复保存的工作，当有多个工作状态时，使用git stash apply stash@{0}
4,git stash drop  //删除保存的工作状态
5,git stash pop   //恢复并删除保存的工作状态
=================================================================================================================================================================
多人协作
1,git remote -v    //查看远程库信息
2,git push origin <branch-name>     //向远程库推送分支
3,git pull     //抓取远程库中的分支
4,git checkout -b <branch-name> origin/<branch-name>     //在本地创建和远程分支对应的分支
5,git branch --set-upstream-to <branch-name> origin/<branch-name>   //建立本地分支和远程分支的关联
6,git rebase    //操作可以把本地未push的分叉提交历史整理成直线
==================================================================================================================================================================
标签管理



















